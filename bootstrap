#!/usr/bin/env bash
# bootstrap installs things.
cd "$(dirname $0)"

# FORMATTING
HL=$'\e[0;92m'
HAPPY=$'\e[0;92m'
WARN=$'\e[91m'
HEADER=$'\e[107m\e[30m'
END=$'\e[0m\e[39m\e[49m'
LB=$'\n'

DOTFILES_ROOT=$(pwd -P)
set -e

function main () {
  heading '@walrusk .dotfiles bootstrap' 'ðŸ’¾'

  heading 'Setup gitconfig..'
  setup_gitconfig;

  heading 'Installing dotfiles..'
  install_dotfiles;

  heading 'Installing homebrew..'
  setup_homebrew;

  heading 'Installing dependencies..'
  brew bundle;

  # find the installers and run them iteratively
  heading 'Running installers..'
  find . -name install.sh | while read installer ; do sh -c "${installer}" ; done

  heading 'Manual steps..'
	echo "1. Keyboard Settings ==> Use F1,F2, etc. as std. function keys
2. Keyboard Settings ==> Modifier Keys ==> Caps Lock as Ctrl
3. iTerm2 Preferences ==> Keys ==> + ==> Cmd+K --> Send Hex Codes: 0x02 0x0B 0x0C"

  heading 'FIN' 'ðŸ¦ˆ'
}

function setup_homebrew () {
  if [ -x /usr/local/bin/brew ]; then
      brew update;
  else
      /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)";
      if [ -x /usr/local/bin/brew ]; then
          brew -v
      else
          exit 1;
      fi
  fi
}

function setup_gitconfig () {
  if ! [ -f git/gitconfig.local.symlink ]
  then
    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi

    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/.gitconfig.local.example > git/.gitconfig.local

    success 'gitconfig'
  fi
}

function link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

function install_dotfiles () {
  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '.*' ! -path "$DOTFILES_ROOT" ! -path '*.git' ! -path "$DOTFILES_ROOT/.gitignore" ! -path '*.DS_Store' ! -path '*.example')
  do
    dst="$HOME/$(basename "${src}")"
    link_file "$src" "$dst"
  done
}

function heading () {
  ICON=$2
  if [ -z "$ICON" ]; then
      ICON='ðŸšš'
  fi
  echo "  [ ${ICON}  ] ${HL}$1${END}"
}

function user () {
  printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

function success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

function fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

main;
